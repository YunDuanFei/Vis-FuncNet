number_iteration = 499
colors = [
    '#32B67A', '#6F91B5', '#EF8F88', '#79A8A9', '#927AC3', '#EDC382', '#EBE0D6',
    '#FD8B8B', '#61BFAD',
]
font = {'weight' : 'normal', 'size' : 10,}
use_same_inilr = True

class Mathname(object):
    dataset_attrs = {
        'rosenbrock': {
            'minimal': (1., 1.),
            'x_lins': (-2., 2., 250),
            'y_lins': (-1., 3., 250),
            'ini': (-2., 2.5),
            'name': 'Rosenbrock function',
            'x_lim': (-2., 2.),
            'y_lim': (-1., 3.),
            'z_lim': (-500, 2500),
            'counter': 100,
            'z_major_locator': 1000,
            'z_minor_locator': 500,
            'y_major_locator': 0.8,
            'y_minor_locator': 0.4,
            'x_major_locator': 0.4,
            'x_minor_locator': 0.2,
            'offset': -490,
            'view': (40, 60),
            'momentum': 0.,
        },
        'peaks': {
            'minimal': (0.2, -1.62),
            'x_lins': (-2., 2., 250),
            'y_lins': (-3., 3., 250),
            'ini': (0.57, 0.8),  # (0.4, 1.) (-0.4, 0.4) (0.57, 0.) (0.57, 0.8)
            'name': 'Peaks function',
            'x_lim': (-2., 2.),
            'y_lim': (-3., 3.),
            'z_lim': (-2., 2.),
            'counter': 100,
            'z_major_locator': 0.8,
            'z_minor_locator': 0.4,
            'y_major_locator': 1,
            'y_minor_locator': 0.5,
            'x_major_locator': 1,
            'x_minor_locator': 0.5,
            'offset': -3,
            'view': (40, 240),
            'momentum': 0.9,
        },
        'saddle': {
            'minimal': (0., 4.),
            'x_lins': (-5., 5., 250),
            'y_lins': (-5., 5., 250),
            'ini': (-4., 0.),  # 
            'name': 'Saddle function',
            'x_lim': (-5., 5.),
            'y_lim': (-5., 5.),
            'z_lim': (-25., 20.),
            'counter': 100,
            'z_major_locator': 8,
            'z_minor_locator': 4,
            'y_major_locator': 2,
            'y_minor_locator': 1,
            'x_major_locator': 2,
            'x_minor_locator': 1,
            'offset': -25,
            'view': (40, 40),
            'momentum': 0.9,
        },
        'saddle2': {
            'minimal': (1., -1.),
            'x_lins': (-2., 2., 250),
            'y_lins': (-1., 1., 250),
            'ini': (2., 0.1), 
            'name': 'Saddle2 function',
            'x_lim': (-2., 2.),
            'y_lim': (-1., 1.),
            'z_lim': (-4., 2.),
            'counter': 100,
            'z_major_locator': 2,
            'z_minor_locator': 1,
            'y_major_locator': 1,
            'y_minor_locator': 0.5,
            'x_major_locator': 1,
            'x_minor_locator': 0.5,
            'offset': -4,
            'view': (40, 260),
            'momentum': 0.9,
        },
        'cross_sectional': {
            'minimal': (0.02, -0.43),
            'x_lins': (-7., 7., 250),
            'y_lins': (-7., 7., 250),
            'ini': (-6., 4.), 
            'name': 'Cross Sectional function',
            'x_lim': (-7., 7.),
            'y_lim': (-7., 7.),
            'z_lim': (-1., 2.),
            'counter': 100,
            'z_major_locator': 1,
            'z_minor_locator': 0.5,
            'y_major_locator': 3,
            'y_minor_locator': 1.5,
            'x_major_locator': 3,
            'x_minor_locator': 1.5,
            'offset': -1,
            'view': (40, 120),
            'momentum': 0.9,
        },
        'goldsteinprice': {
            'minimal': (-0., -1.),
            'x_lins': (-2.5, 2., 250),
            'y_lins': (-2., 2., 250),
            'ini': (-2.35, 1.6), 
            'name': 'Goldstein-Price function',
            'x_lim': (-2.5, 2.),
            'y_lim': (-2., 2.),
            'z_lim': (-10000., 1000000),
            'counter': 500,
            'z_major_locator': 200000,
            'z_minor_locator': 100000,
            'y_major_locator': 1,
            'y_minor_locator': 0.5,
            'x_major_locator': 1,
            'x_minor_locator': 0.5,
            'offset': -10000,
            'view': (40, 280),
            'momentum': 0.,
        },
        'threehump': {
            'minimal': (0., 0.),
            'x_lins': (-3., 3., 250),
            'y_lins': (-4., 4., 250),
            'ini': (0, 3.8), 
            'name': 'Three-hump camel function',
            'x_lim': (-3., 3.),
            'y_lim': (-4., 4.),
            'z_lim': (-100., 100),
            'counter': 500,
            'z_major_locator': 50,
            'z_minor_locator': 25,
            'y_major_locator': 2,
            'y_minor_locator': 1,
            'x_major_locator': 2,
            'x_minor_locator': 1,
            'offset': -100,
            'view': (40, 280),
            'momentum': 0.9,
        },
        'sigmoid': {
            'minimal': (-9., 0.),
            'x_lins': (-21., 21., 250),
            'y_lins': (-4., 4., 250),
            'ini': (6.5, 0.), 
            'name': 'Sigmoid function',
            'x_lim': (-21., 21.),
            'y_lim': (-4., 4.),
            'z_lim': (-0., 1),
            'counter': 100,
            'z_major_locator': 0.5,
            'z_minor_locator': 0.25,
            'y_major_locator': 2,
            'y_minor_locator': 1,
            'x_major_locator': 7,
            'x_minor_locator': 3.5,
            'offset': -0,
            'view': (40, 120),
            'momentum': 0.9,
        },
        'squre': {
            'minimal': (0., 0.),
            'x_lins': (-5., 5., 250),
            'y_lins': (-5., 5., 250),
            'ini': (4.5, -4.5), 
            'name': 'Squre function',
            'x_lim': (-5., 5.),
            'y_lim': (-5., 5.),
            'z_lim': (-1.5, 0.8),
            'counter': 100,
            'z_major_locator': 0.5,
            'z_minor_locator': 0.25,
            'y_major_locator': 2,
            'y_minor_locator': 1,
            'x_major_locator': 2,
            'x_minor_locator': 1,
            'offset': -1.5,
            'view': (40, 120),
            'momentum': 0.9,
        },
    }

    @staticmethod
    def get(name):
        attrs = Mathname.dataset_attrs[name]
        return attrs.copy()

def make_math(math_name):
    args = Mathname.get(math_name)
    return args